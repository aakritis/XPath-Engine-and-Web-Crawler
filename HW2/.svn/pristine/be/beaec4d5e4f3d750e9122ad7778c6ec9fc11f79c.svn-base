package edu.upenn.cis455.xpathengine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.w3c.dom.Document;

public class XPathEngineImpl implements XPathEngine {

	private String[] xpaths;
	private int index;
	private HashMap<String, ArrayList<String>> map_node_name;

	public XPathEngineImpl() {
		// Do NOT add arguments to the constructor !!
	}

	public void setXPaths(String[] s) {
		/* TODO: Store the XPath expressions that are given to this method */
		this.xpaths = s;
	}

	public boolean isValid(int i) {
		try {
			/* TODO: Check which of the XPath expressions are valid */
			this.index = i;
			System.out.println("[Ouptut from log4j] Validating XPath : " + this.xpaths[index]);

			// current xpath being checked 
			String curr_xpath = this.xpaths[index];

			/* xpath should start with axis (/) and step cannot be empty
			 * isValidXPath XPath -> axis step
			 */
			if (! curr_xpath.startsWith("/") || curr_xpath.equals("/"))
				return false;

			this.map_node_name = new HashMap<String,ArrayList<String>>();
			
			// removing first / check the remaining xpath
			// start processing from step -> multi level expression -> test
			return this.is_valid_step(curr_xpath.substring(1));
		}
		catch (Exception e) {
			System.err.println("[Output from log4j] Error while checking isValid Xpath grammar" + e);
			return false;
		}
	}

	// Function to check step -> (split string into multiple sublevels dividing based on "/" "/") 
	public boolean is_valid_step (String grammar_step) {
		try {
			System.out.println("[Ouptut from log4j] Validating step : " + grammar_step);

			ArrayList<String> sub_levels = this.extract_sub_levels(grammar_step);
			for (String level : sub_levels) 
				if (!is_valid_level(level)) 
					return false;
			return true;
		}
		catch (Exception e) {
			System.err.println("[Output from log4j] Error while checking is_valid_step in step grammar " + e);
			return false;
		}
	}

	// extracting sub levels from "/" to "/" without brackets 
	public ArrayList<String> extract_sub_levels (String sub_path) {
		try {
			System.out.println("[Ouptut from log4j] Extracting Sub Levels is step grammar ");
			ArrayList<String> sub_level = new ArrayList<String>();

			// base case - if only nodename 
			// step -> nodename 
			if (! sub_path.contains("/")) {
				sub_level.add(sub_path);
				return sub_level;
			}

			// step -> nodename ([test])* (axis step)?
			// converting to step -> levels  + xpath?
			StringBuffer one_level = new StringBuffer();
			// character stack to manage level within special characters 
			Stack<Character> bracket_stack = new Stack<Character>();

			//handling quotes 
			boolean is_in_quotes = false;

			// traversing subpath character-wise
			for (int index = 0; index < sub_path.length(); index++) {
				char ch = sub_path.charAt(index);

				switch(ch) {
				case '"':
					// changing from false to true on first occurence and back 
					is_in_quotes = !is_in_quotes;
					break;
				case '[':
					if(!is_in_quotes) bracket_stack.push(ch);
					break;
				case  ']' :
					if(!is_in_quotes){
						if(bracket_stack.isEmpty())
							break;
						bracket_stack.pop();
					}
					break;
				case '/':
					if(!is_in_quotes){
						if(!bracket_stack.isEmpty()) 
							break; 
						sub_level.add(one_level.toString());
						one_level.setLength(0);
						continue;
					}
				}
				one_level.append(ch);
			}
			sub_level.add(one_level.toString());
			return sub_level;
		}
		catch (Exception e) {
			System.out.println("[Output from log4j] Error while extracting sub levels in step grammar extract_sub_levels " + e);
			return null;
		}
	}

	// function to check every extracted level in the step function
	public boolean is_valid_level (String sub_level) {
		try {
			System.out.println("[Ouptut from log4j] Validating sub-levels in step : " + sub_level);

			String regex_sub_level = "(\\s)*([A-Z_a-z][A-Z_a-z-.0-9]*)(\\s)*(\\[.+\\])*";
			Pattern sub_level_pattern = Pattern.compile(regex_sub_level);
			Matcher sub_level_matcher = sub_level_pattern.matcher(sub_level);

			if (sub_level_matcher.matches()) {
				String node_name = null;
				StringBuffer curr_test = new StringBuffer();
				
				Stack<Character> bracket_stack = new Stack<Character>();
				
				boolean is_in_quotes = false;
				boolean has_node_name = false;
				boolean is_in_test = false;
				
				for (int index = 0; index < sub_level.length(); index++) {
					char ch = sub_level.charAt(index);
					switch (ch) {
					case '"' :
						is_in_quotes = !is_in_quotes;
						break;
					case '[' :
						if (!is_in_quotes) {
							bracket_stack.push(ch);
							is_in_test = true;
							if (!has_node_name) {
								node_name = sub_level.substring(0,index);
								has_node_name = true;
							}
						}
						break;
					case ']' :
						if (!is_in_quotes) {
							bracket_stack.pop();
							if (bracket_stack.isEmpty()) {
								is_in_test = false;
								if (!this.is_valid_test(curr_test.toString()))
									return false;
								if (this.map_node_name.containsKey(node_name))
									this.map_node_name.get(node_name).add(curr_test.toString());
								else {
									ArrayList<String> test_data = new ArrayList<String>();
									test_data.add(curr_test.toString());
									this.map_node_name.put(node_name, test_data);
								}
								curr_test.setLength(0);
							}
						}
						break;
					}
					if(is_in_test) {
						curr_test.append(ch);
					}
				}
				return true;
			}
			else {
				System.out.println("[Ouptut from log4j] Invalid Level in is_valid_level : " + sub_level);
				return false;
			}
		}
		catch (Exception e) {
			System.err.println("[Output from log4j] Error while checking is_valid_level in step grammar " + e);
			return false;
		}
	}
	
	
	public boolean is_valid_test (String grammar_test) {
		try {
			System.out.println("[Ouptut from log4j] Validating grammar in test : " + grammar_test);
			// removes brackets 
			String test_val = grammar_test.substring(1,grammar_test.length());
			System.out.println("[Ouptut from log4j] Validating grammar in test - required substring : " + test_val);

			/* checking pattern 2 test -> text() = "..."
			            pattern 3 test -> contains(text(),"...")
			            pattern 4 test -> @attrname = "..."  */
			
			String regex_test_cases = "(((\\s)*text(\\s)*\\((\\s)*\\)(\\s)*\\=(\\s)*\\\"[^\\\"]+\\\"(\\s)*)|"  + // test case 2  
					"((\\s)*contains(\\s)*\\((\\s)*text(\\s)*\\((\\s)*\\)(\\s)*,(\\s)*\\\"[^\\\"]+\\\"(\\s)*\\))|" + // test case 3
					"((\\s*)\\@(\\s*)([A-Z_a-z][A-Z_a-z0-9-.]*)(\\s*)\\=\\\"[^\\\"]+\\\"(\\s*)))"; // test case 4
	
			Pattern pattern_test = Pattern.compile(regex_test_cases);
			Matcher matcher_test = pattern_test.matcher(test_val);
			
			if (matcher_test.matches()) {
				System.out.println("[Ouptut from log4j] Simple Match Test 2/3/4 cases matched - Validated");
				return true;
			}
			else {
				// checking pattern 1 test -> step
				System.out.println("[Ouptut from log4j] Check for further step in grammar - Continue Validating");
				return this.is_valid_step(test_val);
			}
		}
		catch (Exception e) {
			System.err.println("[Output from log4j] Error while checking is_valid_level in step grammar " + e);
			return false;
		}
	}

	public boolean[] evaluate(Document d) { 
		/* TODO: Check whether the document matches the XPath expressions */
		return null; 
	}
}
